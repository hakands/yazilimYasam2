Bilgisayar kavramı ilk olarak hayatımıza girdiğinde muhtemelen büyüklerimiz büyük şaşkınlıkla gelişmeleri takip etmiş olsa gerek. Ben de küçüklüğümde hayranlıkla bu cihaza bakarken en çok düşündüğüm şey ise bu cihazı neden tasarladıklarından ziyade nasıl tasarlandığı oluşuydu. İnanılmaz merak uyandırıcı bir şey değil mi bu sizce de? Bir oda büyüklüğündeki bilgisayarlardan günümüzdeki cep bilgisayarlarına kadar müthiş bir geliştirme süreci.	Önümüzde uzun seneler varken bu süreç bizi nereye kadar götürecek,daha neler göreceğiz acaba diye de insan kendi kendine sormuyor değil. Yüz binlerce belki de milyonlarca yazılımcı şuan bu geliştirme sürecine doğrudan ya da dolaylı yoldan etki ediyor. Bu süreçte ben de heyecanla ipin ucundan tutmak için sabırsızlanıyorum ve sıramı bekliyorum diyebilirim.
Aslında konuya biraz sonra geleceğim çünkü yazılımdan ve yazılımın geliştirilmesinden,yazılım geliştirilme süreçlerinden bahsedeceksek olgu olarak bu konunun ne kadar önemli olduğunun farkına varmalıyız. Aksi halde madde madde açıklamanın veya öğrenmenin tam anlamıyla fayda sağlayacağını düşünmüyorum. Peki bu yazılım ve yazılım döngüsü nedir nasıl işler bir de benim dilimden bakalım.
Yazılım dediğimizde genelde akla ilk gelen şey karışık kod satırlarıdır. Kağıt üzerinde karışık gibi duran kod satırlarının aslında bir düzeni olmuştur ve olmalıdır da aksi düşünülemez.Yazılım projeleri ciddi oranda başarısızlığa uğramaktadır. Bunun birçok sebebi vardır fakat birkaçından bahsetmek isterim.Projeyi geliştirecek olan kişilerin proje için yetersizliği,mali veya politik değişimler,projeyi sarsacak olan gereksinimlerdeki değişimler bir projenin başarısız sonuçlanmasında büyük etkendir. Tabii ki de yazılım geliştiriciler şu anda insandır ve hata yapmaya müsaittir. Neden “şu anda” dediğime gelirsek ileri zamanlarda belli algoritmalar yardımıyla kendi kendine geliştirilebilen mekanizmaların kuşkusuz bizleri beklediğini düşünüyorum.Genel olarak geliştirilen projenin bizlere hizmet etmesi amacın ana maddesidir.
Yazılım yaşam döngüsü de bizlere fayda sağlamak için geliştirilen projenin daha sağlıklı ilerlemesi için uygulanan aşamalardan oluşur. Bu aşamalar projenin olmazsa olmazıdır çünkü sistematik ilerleyen her iş patlak vermeye müsaittir. Her adımı titizlikle denetlenmelidir. 
                                            
 Bir basketbol takımı maç öncesinde veya maç esnasında coach’un verdiği taktikleri uygulayarak maçı kazanmaya çalışır.Her şey planlıdır ve planları uygulamak takımın görevidir. Aynı şekilde yazılımcı kişilerin yazdığı kod satırlarının da aslında bir planı ve düzeni vardır. Yapılmak istenilen projenin belirlenilmesinden projenin bitişine kadar olan süreçte bir plan söz konusudur. Yazılım geliştiricisi için bazı planlama yaklaşımları vardır. Basitlik,geleneksel ve çevik yaklaşımlar olarak değerlendirilir.Yazılım geliştirmek asla basit bir olay değildir ve en önemli aşamalarından biri olan planlamanın da bazı prensipleri vardır. Gerçekçi olmak,kestirimlerde bulunmak,değerlendirme yapmak,sınırları koyabilmek ve bunlara uyabilmek gibi örneklendirebiliriz.
  Oynanan bir maçta skora göre taktikler nasıl değişebiliyorsa geliştirilen projenin gereksinimleri de değişebilir. Önemli olan da bundan dolayı pes etmemektir. Yazılım projesinin kağıt üzerindeki plan aşamaları ; gereksinim,analiz tasarım,gerçekleştirme döngüsünden oluşur. Bahsettiğim aşamalar bir bütün olarak değerlendirilmelidir. Gereksinim tarafındaki bir değişiklik, gerçekleştirme tarafını da etkileyebileceği unutulmamalıdır. Bu aşamalar projenin kalbidir ve ayrıntılarıyla incelenmelidir diye düşünüyorum.


                 
Yukarıdaki görselde her kavramı aşağı yukarı tahmin edebiliyoruzdur diye düşünüyorum. Sadece çözümleme aşamasını çok kısa açıklama ihtiyacı hissettim. Gereksinimlerin ayrıntılı olarak kağıda döküldüğü,bazı temel uml diyagramlarının çizilmeye başlandığı aşamadır.
Yol haritasının da kafamıza oturdurduğunu düşünüyorum. Artık yavaş yavaş yazılım yaşam döngüsünde daha derine inmenin vakti geldi. Proje geliştirmeye başlanırken bazı temel adımlar üzerinde yoğunlaşırız. Belirtim yöntemleri ( Software specifications methods) konusunda belirlenen fonksiyonları yerine getirmek amacıyla kullanılan metotlardır. Süreç modelleri (Software process models) ise yazılım yaşam döngüsünde kararlaştırılan süreçlerin ilerleme aşamasında belli bir düzene göre veya belli bir sırada ne şekilde uygulanacağını tanımlayan modeller, metotlar kullanılır. Bu yazımda da bu süreç modellerini  ayrıntılı açıklamaya çalışacağım.
Süreç modellerine girmeden en başta bizi süreç (process) kısmı karşılıyor. Süreç ; olguların ya da olayların belli bir taslağa uyguın ve  belli bir sonuca varacak şekilde düzenlenmesidir. Projelerde her zaman önümüze çıkan aralarında birlik olan ve bu birliğin zaman içerisinde tekrarlanması şeklinde giden olay dizisine de süreç diyebiliriz. Yazılım süreci bizim yazılım üretme yolumuzdur ne yapmak istiyorsak tüm detaylara yeterince yer vererek tamamlamaya çalışırız. 
Süreç modelleri; yazılım yaşam döngüsünde ifade edilen süreçlerin geliştirilme aşamasında belli bir düzende veya nasıl uygulanacağını tanımlar.Yazılım geliştirmenin ne kadar zor olduğundan bahsetmiştik ve bu zorluklarla baş edebilmek için ve projeyi daha da sistematik hale getirmek için çeşit çeşit süreç modelleri ortaya çıkmıştır. Bu modellerin temel hedefi yazılım geliştirme yaşam döngüsü (software development life cycle) süresince takip edilmesi tavsiye edilen süreçleri tanımlar. Maddelerin ortaya çıkmasında geçmişte veya bulunduğumuz dönemin teknolojik, maddi ve sektörel ihtiyaçları önemli rol oynamıştır. Modeller sürecin ayrıntıları veya süreçler arası ilişkilerle ilgilenmez. Kısaca yazılım üretim işinin yapılma düzenine yol göstericiler olarak kullanılabilir. Peki neden bu modeller çok önemli? Çünkü projenin performans,üretkenlik,marka değerine doğrudan pozitif ivme kazandırır. Proje geliştiricileri veya yöneticileri yazılım geliştirme sürecinin zoruluklarıyla baş etmesine yardımcı olur. Yazılım yaşam döngüsünün temel adımlarından aşağıdaki gibi bahsedebiliriz.
1)Gereksinim ( Requirements):Geliştirilecek projenin amacını,etkisini,boyutlarının yani gereksinim ve yapılabilirliğini (feasibility) değerlendiren çalışmalardır.Gereksinimler neden değişkendir? Nasıl oluyor da gereksinimlerdeki ufak bir ayrıntı bile projeyi başarısız kılabiliyor? Projenin şirket için geliştirildiğini düşünelim. Genellikle şirketin düşüncesinde sadece genel bir yaklaşım vardır. Yorumlamaya açık ve sınırları kesin çizgilerle çizilmeyen projelerde başarısız olmak kaçınılmazdır. Kesin belirlenmiş çizgiler dahi zaman geçtikte değişebilir. İşte bu yüzden her değişime ayak uydurmak zorunda olunmalıdır.
2)Analiz (Analysis): Geliştirilmeye karar verilen projenin belirli yöntemlere ve kurallara bağlı kalarak gözden geçirilmesi ve tahlil edilmesi. Her aşama olduğu gibi bu aşamada da yanlış bir tahlil sonucu proje sekteye uğrayabilir. Dikkat edilmesi gereken adımlardan biridir.

3)Tasarım ( Design):Belirlenen ihtiyaçları karşılayabilecek sistemin temeli oluşturulur. Sistemin modüler yapısı akış şemaları,yazılımı içeren ayrıntıların somut hale getirilmesi.
4)Gerçekleştirme ( Implementation):İçeriklerin kod hale getirildiği sistematik bir şekilde test edildiği ve projenin oluşturulduğu aşamadır. Şirketler en çok bu kısım için nitelikli iş gücüne taliptir. Marka değerinin en çok olduğu düşünülen bu aşama günümüzde en çok iş ilanı olan adım olarak bilinir.
5)Bakım (Maintenance): Geliştirilme aşaması biten projenin hatalarını,buglarının giderildiği ve düzeltildiği aşamadır.

 
Yukarıdaki görselde gördüğümüz gibi birçok model günümüzde mevcut olmakla beraber bu modellere gelecekte ekleme yapılması da söz konusudur. Bu modellere yakından göz atalım.
1-) Kodla ve Düzelt ( Code and Fix) : Her aşamanın hemen hemen aynı öneme sahip olduğu bu modelde tüm adımlardaki çaba doğrudan geliştirilen projeye veya ürüne katkı sağladığından proje geri bildirimleri(feedback) olumlu olarak bizlere yansır. Diğer modellere göre kısa denilebilecek olan bu modelde ürünü oluşturan kişiler kullanacaksa daha fazla avantaj sağlar. Avantajları olduğu gibi dezavantajları da vardır. Bu model bireysel geliştiriciler için uygundur. Geliştirilme esnasında müşteri olaya dahil edilmez ve bu da ürünün müşterinin ihtiyaçlarına uygun olmamasına yol açar. Geliştirilen projenin boyutunun artması sonucunda ortaya çıkan karmaşıklığın idare edilmesi zorlu olur. Değişiklikler yapılırken önceden planlanılmayan değişiklikler kodda karmaşık bir hal söz konusu olur ve düzenlemeleri yapmak bir hayli vakit alır.
2-) Gelişigüzel Model : Geliştirilen bu model kullanılma esnasında başka bir model veya yöntem kullanılamaz. Takip edilmesi ve bakımı oldukça zordur. Aslında giriş seviye basit bir programlama yöntemidir.Sistematik bir durum söz konusu omadığı gibi ortaya çıkan ürünün geniş kitlelere hitap etmesi de beklenmez. Çoğunlukla tek kişinin geliştirdiği bu projede yine ürünü de kendisi kullanması öngörülür.
3-) Barok Modeli : Günümüzde kullanımı önerilmeyen modellerin başında gelir.Günümüz modellerinden farkı ise dokümantasyonun ayrı bir bölüm olarak ele alınmasıdır. Halbuki günümüzde belgeleme yapılan bir işin doğal bir ürünü olarak görülmektedir. Belgelemeyi ayrı bir süreç olarak ele alır ve projenin geliştirilmesi ve bakımından sonra direkt olarak yapılmasını uygun görür. Adımlar arası geri dönüşün nasıl yapılacağı soru işareti olmuştur.70li yıllarda geliştrilen bu modelin popülaritesi günümzde artık yok denecek kadar azdır.
4-) Çağlayan / Şelale Modeli ( Waterfall model) : Yukarıda bahsettiğim barok modelin gibi  günümüzde daha popülaritesini kaybeden bu model en eski ve en tanınmış model olarak bilinir. Ayrıca geleneksel yazılım modeli olarakta kaynaklarda yer alır. İyi planlanmış ve üretimi diğer modellere göre daha az zaman gerektirecek yazılım projeleri için uygun görülmektedir. Barok modelinin aksine belgeleme işlevini ayrı bir işlem olarak ele almaz.Barok modele göre geri dönüşler dengeli tanımlanmıştır. Gerekirse proje geliştirilirken tekrarlamalar (iterasyonlar) olabilir. Belirsizliğin minimum seviyede olduğu bu modelde şüphesiz  yazılım üretimi çok fazla zaman almayacaktır. Her aşamanın sonucu bir ya da birden fazla onaylanan belgedir. Eğer geliştirilme safhalarından birinde bakım olmamış ise o safhanın ilerlemesi kabul edilemez.  

                             
Ayrıca bu modelde sekmeler geri dönüşler  de tanımlıdır. Bu modelin kullanımında önemli olan hususlardan birisi de geliştirlen projedeki ihtiyaçların olabildiğinde ayrıntılı olması gerekmektedir. Bu modeldeki tasarım aşaması özverili bir şekilde yapılmalıdır yoksa gereksinimleri karşılamadığı tartışmaları meydana gelebilir. Bu yüzden gereksinimleri iyi anlaşılabilen projelerde iyi çalışır. Geliştirilen projenin müşteriye ulaşma vakti uzundur. Bu modelde kod yazma kısmı daha fazla önemsendiği için diğer aşamalar kod yazma aşaması kadar önemli olmadığı belirtilir.
5-) V Modeli ( V-shaped model) : Belirsizliklerin az iş tanımlarının belirgin olduğu projeler için uygun bir modeldir. Model müşterinin projeye katkısını artırmaktadır. 
 
Yukarıdaki görselde sol tarafın üretim sağ tarafın ise test(sınama) işlemleri olduğu bilinmelidir. Bu modelde verification(doğrulama) planları erken aşamalarda uygulanır ve proje yönetiminin takibi ile kullanımı kolaydır. Fakat aşamalar arasında tekrarlamalar kullanılmaz,risk çözümleme ile ilgili aktiviteleri içermez.
6-) Helezonik (Spiral) Model : Bu modelde risk analizi olgusu ön plana çıkmıştır. Hedefler ,alternatifler ve kısıtlamalar belirlenip çözülür. Geliştirilme esnasında sonraki aşama düşünülür. Doğrudan tasarım gibi bir aşama yoktur her döngü bir aşamayı ifade eder. Prototip yaklaşımı da zaman zaman görülmektedir. Pek çok yazılım modelini içinde bulunduran bu modelde riske duyarlı yaklaşımlar potansiyel zorlukları engeller.Geliştirmeyi parçalara bölerek en riskli kısımlar daha önce çözülmektedir. 
 
Diğer modellere göre daha kapsamlı ve daha pahalı olan bu modelde daha çok büyük ölçekli projeler geliştirilir. Karmaşıktır ve spiral sonsuza kadar gidebilir.
7-) Artımsal Süreç Modeli : Sistem için gerekli olan gereksinimler müşteriyle belirlenir. Öncelikle en önemli gereksinimi karşılayacak çekirdek bir uygulama geliştirilir. Gereksinimlerin önemine göre teslim edilen her adım tüm projenin başarısız olma riskini azaltır. En önemli özelliklerinden biri de daha fazla test edilmesidir. Fakat böylesi önemli bir iş için diğer aşamalara daha çok deneyimli insanlar aranır.
SCRUM: Scrum kelimesi bir oyun olan rugby terimidir. Rugby oyununda oyuncular topu almaya çalışır ve genel olarak buna biz scrum deriz. Yazılım geliştrime alanında da kullanılan bu terim proje geliştirilirken belli bir dayanışma içinde ilerleme halinde olmanın ta kendisidir. Bireysel rollerin birleşerek takım olarak daha hızlı ve daha olumlu geri dönüşler alınmasında etkilidir.
